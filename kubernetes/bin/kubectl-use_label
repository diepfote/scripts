#!/usr/bin/env bash

# all of these stem from https://www.shellcheck.net/wiki/
set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs
shopt -s inherit_errexit  # Bash disables set -e in command substitution by default; reverse this behavior


_help() {
cat <<EOF
USAGE: kubectl use-label -n <NAMESPACE> -l <LABEL> [--last] <what-you-want-to-run>

Uses a label to run an operation on the first pod it finds.

Options:
    --last  ... take the last pod not the first

Examples:
    kubectl use-label -n default -l app=the-app exec -it --  bash
    kubectl use-label -n default -l app=the-app exec -- /tmp/script-to-run

    kubectl use-label -n default -l app=the-app delete

    kubectl use-label -n default -l app=the-app describe

    kubectl use-label -n default -l app=the-app get -o json

    kubectl use-label -n default -l app=the-app sick-pod

NOTES:
    Please be sure to put namespace and label options before any other options,
    flags or args. This script will not work correctly otherwise.
EOF
}

if [ $# -eq 0 ]; then
  _help
  exit
fi


# Parse arguments
LABEL=''
NAMESPACE=''
LIMIT_CMD=(head -n 1)
while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    -l|--label)
    LABEL="$2"
    shift 2
    ;;

    -n|--namespace)
    NAMESPACE="$2"
    shift 2
    ;;

    --last)
    LIMIT_CMD=(tail -n 1)
    shift
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;

  esac
done

OP="$1"
shift

POD="$(k get pod -o name -n "$NAMESPACE" -l "$LABEL" | "${LIMIT_CMD[@]}")"
if [ "$OP" == sick-pods ]; then
  POD="$(echo "$POD" | cut -d '/' -f2)"
fi

set -x
k "$OP" -n "$NAMESPACE" "$POD" "$@"


#!/usr/bin/env bash


# MEANT TO BE SYMLINKED TO A DIR EXPOSED IN PATH
# in my case
# ln -s ~/Documents/scripts/kubernetes/bin/darwin/watch-namespace \
#       ~/.bin/kubectl-watch_namespace


set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs

if which kubectl >/dev/null; then
  binary=kubectl
elif which oc >/dev/null; then
  binary=oc
else
  echo -e "${RED}Missing kubectl and oc binaries!\nPlugin needs at least one.$NC" >&2
  exit 1
fi

put_args () {
  for item in "$@"; do
    echo -n "$item "
  done
}

_help() {
cat <<EOF
USAGE: watch-namespace -n <NAMESPACE> -r <REGION>

OPTIONS:
-n|--namespace NAMESPACE Namespace to watch
-r|--region    REGION    Datacenter region
EOF
}


if [ $# -eq 0 ]; then
  _help >&2
  exit
fi

# Parse arguments
positional_args=()
namespace=''
region=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    -n|--namespace)
    namespace="$2"
    shift 2
    ;;

    -r|--region)
    region="$2"

    if [[ "$region" =~ 'generated/' ]]; then
      # aws binary has to be present for generated kubeconfigs

      # shellcheck disable=SC1090
      pushd ~/Documents/deploy-jira  || exit 1
    fi
    shift 2
    ;;

    -h|--help)
    _help >&2
    exit
    ;;

    *) # unknown option
    positional_args+=("$1") # save in an array for later
    shift
    ;;
  esac
done
set -- "${positional_args[@]}"


if [ -z "$region" ]; then
  echo -e "${RED}Incomplete input. Region (empty)!$NC\n" >&2
  _help >&2
  exit 1
fi

_split_and_run_tmux_command () {
  local pane_id

  tmux split-window -d  'export BASH_SOURCE_IT=true; bash'
  pane_id="$(tmux display -pt ".+" '#{pane_id}')"
  sleep 5

  tmux send-keys -t "$pane_id" "source ~/.bashrc; \
    set-kubecontext '$region'; \
    watch "$binary" get pod -n '$namespace' " \
    "$(put_args "${positional_args[@]}")" C-m
  }

(_split_and_run_tmux_command &)


#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


mac-os-updates () {
  echo -e '\n\n--------\n\nListing Mac OS updates'
  pkg_info=()

  while IFS='' read -r line; do
    pkg_info+=( "$line" )
  done < <(softwareupdate --all -l --force)

  for line in "${pkg_info[@]}"; do
    echo "$line"
  done

  if [ "${#pkg_info[@]}" -gt 3 ]; then  # 3 lines are returned always

    echo -e '\n\n--------\n\nInstalling Mac OS updates that do not require a restart.'

    echo 'Do you want to update & restart?'
    set +u
    if yesno; then
      echo -e '\n\n--------\n\nInstalling Mac OS updates that require a restart.'
      set -x
      sudo softwareupdate -i --no-scan -a -R
      set +x
    else
      set -x
      softwareupdate -i --no-scan -a &
      set +x
    fi
    set -u
  fi
}


_help() {
cat <<EOF
USAGE: w-pkg-update [-g] [-r] [--no-disable-remote-login] [--no-mac-os-updates] [--mac-os-updates-only|--no-update-repos|--reinstall-xcode]

FLAGS:
-g                           greedy option for brew
--reinstall-xcode            (re-)install xcode commandline tools, then exit immediately
--no-update-repos            do not fetch updates to git repositories
--no-lima                    do not start lima vm
--no-mac-os-updates          skip mac os updates
--no-disable-remote-login    do not disable remote login in Mac OS settings
--mac-os-updates-only        check for mac os udpates, start updates, then exit immediately

OPTIONS:

EOF
}

# Parse arguments
GREEDY=''
DO_NOT_START_LIMA=''
NO_MACOS_UPDATES=''
DISABLE_GIT_REPO_UPDATES=''
DISABLE_REMOTE_LOGIN=''
DRY_RUN=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    --dry-run)
    DRY_RUN=true
    shift
    ;;

    -g|--greedy)
    GREEDY=true
    shift
    ;;

    --no-lima)
    DO_NOT_START_LIMA=true
    shift
    ;;

    --no-mac-os-updates)
    NO_MACOS_UPDATES=true
    shift
    ;;

    --no-disable-remote-login)
    DISABLE_REMOTE_LOGIN=false
    shift
    ;;

    --no-update-repos)
    DISABLE_GIT_REPO_UPDATES=true
    shift
    ;;

    --mac-os-updates-only)
    mac-os-updates
    shift
    exit
    ;;

    --reinstall-xcode)
    # shellcheck disable=SC2154
    echo -e "${PURPLE}[>] reinstallig xcode commandline tools$NC"

    set -x
    sudo rm -rf /Library/Developer/CommandLineTools
    sudo xcode-select --install
    sudo -k
    set +x
    exit

    shift
    ;;

    -h|--help)
    _help >&2
    exit 0
    ;;

    *) # unknown option
    echo -e "${RED}Invalid parameter:$NC '$1'!" >&2
    echo
    _help >&2
    exit 1
    ;;
  esac
done


if [ -n "$DRY_RUN" ]; then
  exit
fi


source ~/Documents/scripts/source-me/spinner.sh
source ~/Documents/scripts/source-me/posix-compliant-shells.sh
source ~/Documents/scripts/source-me/darwin/posix-compliant-shells.sh
source ~/Documents/scripts/cc/source-me/posix-compliant-shells.sh
source ~/Documents/scripts/kubernetes/source-me/common-functions.sh

set +u
spinner
SPINNER_PID="$!"
set -u

cleanup () {
  set +x

  kill "$SPINNER_PID" >/dev/null 2>&1
}

echo =====================
echo "Start: $(date)"

if [ -z "$DISABLE_REMOTE_LOGIN" ]; then
  echo
  set -x
  sudo systemsetup -f -setremotelogin off
  set +x
fi

# shellcheck disable=SC2064
trap 'cleanup' EXIT  # stop spinner


# -----------------------------------------------------
# LIMA START

echo -e '\n--------\nlima archlinux disk images update & run\n'

base_url='https://geo.mirror.pkgbuild.com/images'
sed_command=(sed 's#.*href="##;s#".*##')

latest_image_location="$(curl -s "$base_url/" | tr -s ' ' | grep -E '(href="v|latest)' | tail -n 1 | "${sed_command[@]}")"
image_links=()
while IFS= read -r line; do
  image_links+=("$line")
done < <(curl -sL "$base_url/$latest_image_location" | grep cloud | "${sed_command[@]}")

lima_config_file=~/Documents/dot-files/.lima/default/lima.yaml.j2
# set image location
sed -i -r 's#("https://geo.mirror.pkgbuild.com/images).*(")'"#\1/$latest_image_location${image_links[0]}\2#"  "$lima_config_file"
# set image sha256
image_sha256="$(curl -sL "$base_url/$latest_image_location${image_links[1]}" | awk '{ print $1 }')"
sed -i -r 's#(digest: "sha256:).*(")'"#\1$image_sha256\2#"  "$lima_config_file"

if [ -z "$DO_NOT_START_LIMA" ]; then
  if ! limactl list | tr -s ' ' ' ' | grep -q 'colima Running' 2>/dev/null; then
    set -x
    colima start --memory 2  >/dev/null 2>&1  &
    set +x
    disown "$!"
    sleep 1
  fi

  if ! limactl list | tr -s ' ' ' ' | grep -q 'default Running' 2>/dev/null; then
    set -x
    limactl restart default  >/dev/null 2>&1  &
    set +x
    disown "$!"
    sleep 1
  fi
fi

# LIMA END
# -----------------------------------------------------


# -----------------------------------------------------
# PYTHON START

echo -e '\n--------\npip\n'
#
# bypass virtualenv with `-E`
#
# $ python -E ...
#
python_install_cmd=(python3 -E -m pip install --break-system-packages --upgrade)
grep_install_cmd=(grep -v 'already satisfied')

print_additional_arg_info () {
  local additional_arg="$1"
  if [[ "$additional_arg" =~ user ]]; then
    # shellcheck disable=SC2154
    echo "${PURPLE}[${NC}.${PURPLE}]$NC user"
  else
    # shellcheck disable=SC2154
    echo "${PURPLE}[${NC}.${PURPLE}]$NC global"
  fi
}
python_update_pkg () {
  local pkg="$1"
  local additional_arg="$2"

  if [[ "$pkg" =~ typing-extensions|rich ]]; then
    # shellcheck disable=SC2154
    echo "  [.] Pinnend pkg: ${YELLOW}$pkg$NC. Skipping upgrade."
    return
  fi

  if [ -n "$additional_arg" ]; then
    "${python_install_cmd[@]}" "$additional_arg" "$pkg" | "${grep_install_cmd[@]}" || true
  else
    set -x
    "${python_install_cmd[@]}" "$pkg" | "${grep_install_cmd[@]}" || true
    set +x
  fi
}
additional_args=('' '--user')  # global and user pkgs
for additional_arg in "${additional_args[@]}"; do
  print_additional_arg_info "$additional_arg"
  while read -r pkg; do
    python_update_pkg "$pkg" "$additional_arg"
  done < <(python3 -E -m pip list --outdated --format=json "$additional_arg" | jq --raw-output '.[].name')
done

unset python_install_cmd grep_install_cmd additional_args
unset -f python_update_pkg


echo -e '\n--------\npipx\n'
set -x
pipx upgrade-all --include-injected
ln -f --relative -s ~/.local/pipx/venvs/virtualenv/bin/virtualenv-make-relocatable ~/.local/bin/virtualenv-make-relocatable
set +x

#  PYTHON END
# -----------------------------------------------------


echo -e '\n--------\nruby\n'
additional_args=('')  # global only
for additional_arg in "${additional_args[@]}"; do
  print_additional_arg_info "$additional_arg"
  gem update "$additional_arg"  # requires gem install rubygems-update
done

unset additional_args
unset -f print_additional_arg_info


echo -e '\n--------\nnpm\n'
while read -r package; do
  # safe upgrade all https://gist.github.com/othiym23/4ac31155da23962afd0e
  set -x
  npm -g install "$package"
  set +x
done < <(npm -g outdated --parseable --depth=0 | cut -d: -f2)


echo -e '\n--------\nkrew\n'
kubectl krew update
kubectl krew upgrade  2>&1 |  grep -vE 'already on the newest version|Upgrading plugin' || true


echo -e '\n--------\napm\n'
if command -v apm >/dev/null 2>&1; then
  apm upgrade -c false || true
fi


# ---------------------------------------------------
# BREW START

echo -e '\n--------\nbrew\n'
# shellcheck disable=SC2154
echo -e "${PURPLE}[>] ...$NC pulling updates"
brew update


echo -e "${PURPLE}[>] ...$NC starting upgrades"
brew upgrade || true


# install `brew cu`: `brew tap buo/cask-upgrade`
if [ -n "$GREEDY" ]; then
  echo -e "${PURPLE}[>] ...$NC starting greedy cask upgrades"
  brew cu -y -a --no-brew-update
else
  echo -e "${PURPLE}[>] ...$NC starting non-greedy cask upgrades"
  brew cu -y --no-brew-update
fi

git break-osx-credential-helper

# BREW END
# ---------------------------------------------------


if [ -z "$NO_MACOS_UPDATES" ]; then
  mac-os-updates
fi


if [ -z "$DISABLE_GIT_REPO_UPDATES" ]; then
  echo -e '\n--------\nw-git-cleanup\n'

  set +e
  filename=/tmp/_w-git-cleanup.log
  echo "[.] follow along via \`tail -F $filename\`."
  # TODO color output -> `less -R "$filename"`
  w-git-cleanup > "$filename" 2>&1
  set -e
fi


echo
echo "End: $(date)"
echo =====================

#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


mac-os-updates () {
  echo -e '\n\n--------\n\nListing Mac OS updates'  >&2
  pkg_info=()

  while IFS='' read -r line; do
    pkg_info+=( "$line" )
  done < <(softwareupdate --all -l --force)

  for line in "${pkg_info[@]}"; do
    echo "$line"
  done

  if [ "${#pkg_info[@]}" -gt 3 ]; then  # 3 lines are returned always

    echo -e '\n\n--------\n\nInstalling Mac OS updates that do not require a restart.'  >&2

    echo 'Do you want to update & restart?'
    set +u
    if yesno; then
      echo -e '\n\n--------\n\nInstalling Mac OS updates that require a restart.'  >&2
      set -x
      sudo softwareupdate -i --no-scan -a -R
      set +x
    else
      set -x
      softwareupdate -i --no-scan -a &
      set +x
    fi
    set -u
  fi
}


_help() {
cat <<EOF
USAGE: w-pkg-update [-g] [-r] [--no-mac-os-updates] [--mac-os-updates-only|--no-update-repos|--reinstall-xcode]

FLAGS:
-g                           greedy option for brew
--reinstall-xcode            (re-)install xcode commandline tools, then exit immediately
--no-update-repos            do not fetch updates to git repositories
--no-lima                    do not start lima vm
--no-mac-os-updates          skip mac os updates
--mac-os-updates-only        check for mac os udpates, start updates, then exit immediately

OPTIONS:

EOF
}

# Parse arguments
GREEDY=''
DO_NOT_START_LIMA=''
NO_MACOS_UPDATES=''
DISABLE_GIT_REPO_UPDATES=''
DRY_RUN=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    --dry-run)
    DRY_RUN=true
    shift
    ;;

    -g|--greedy)
    GREEDY=true
    shift
    ;;

    --no-lima)
    DO_NOT_START_LIMA=true
    shift
    ;;

    --no-mac-os-updates)
    NO_MACOS_UPDATES=true
    shift
    ;;

    --no-update-repos)
    DISABLE_GIT_REPO_UPDATES=true
    shift
    ;;

    --mac-os-updates-only)
    mac-os-updates
    shift
    exit
    ;;

    --reinstall-xcode)
    # shellcheck disable=SC2154
    echo -e "${PURPLE}[>] reinstallig xcode commandline tools$NC"  >&2

    set -x
    sudo rm -rf /Library/Developer/CommandLineTools
    sudo xcode-select --install
    sudo -k
    set +x
    exit

    shift
    ;;

    -h|--help)
    _help >&2
    exit 0
    ;;

    *) # unknown option
    echo -e "${RED}Invalid parameter:$NC '$1'!" >&2
    echo >&2
    _help >&2
    exit 1
    ;;
  esac
done


if [ -n "$DRY_RUN" ]; then
  exit
fi


source ~/Repos/scripts/source-me/spinner.sh
source ~/Repos/scripts/source-me/posix-compliant-shells.sh
source ~/Repos/scripts/source-me/darwin/posix-compliant-shells.sh
source ~/Repos/scripts/cc/source-me/posix-compliant-shells.sh
source ~/Repos/scripts/kubernetes/source-me/common-functions.sh

set +u
spinner
SPINNER_PID="$!"
set -u

cleanup () {
  set +x

  kill "$SPINNER_PID" >/dev/null 2>&1
}

echo ===================== >&2
echo "Start: $(date)" >&2


# shellcheck disable=SC2064
trap 'cleanup' EXIT  # stop spinner


# -----------------------------------------------------
# LIMA START

echo -e '\n--------\nlima archlinux disk images update & run\n' >&2

base_url='https://geo.mirror.pkgbuild.com/images'
sed_command=(sed 's#.*href="##;s#".*##')

latest_image_location="$(curl -s "$base_url/" | tr -s ' ' | grep -E '(href="v|latest)' | tail -n 1 | "${sed_command[@]}")"
image_links=()
while IFS= read -r line; do
  image_links+=("$line")
done < <(curl -sL "$base_url/$latest_image_location" | grep cloud | "${sed_command[@]}")

lima_config_file=~/Repos/dot-files/.lima/default/lima.yaml.j2
# set image location
sed -i -r 's#("https://geo.mirror.pkgbuild.com/images).*(")'"#\1/$latest_image_location${image_links[0]}\2#"  "$lima_config_file"
# set image sha256
image_sha256="$(curl -sL "$base_url/$latest_image_location${image_links[1]}" | awk '{ print $1 }')"
sed -i -r 's#(digest: "sha256:).*(")'"#\1$image_sha256\2#"  "$lima_config_file"

if [ -z "$DO_NOT_START_LIMA" ]; then
  if ! colima list | tr -s '\t' ' ' | grep -q 'default Running' 2>/dev/null; then
    set -x
    colima start --memory 2  >/dev/null 2>&1  &
    set +x
    disown "$!"
    sleep 1
  else
    colima update -v
  fi

  # if ! limactl list | tr -s ' ' ' ' | grep -q 'default Running' 2>/dev/null; then
  #   set -x
  #   limactl restart default  >/dev/null 2>&1  &
  #   set +x
  #   disown "$!"
  #   sleep 1
  # fi
fi


# LIMA END
# -----------------------------------------------------



echo -e '\n--------\n_w-pkg-update helpers\n'  >&2
execute --timeout 120 --files --config <(find "$(dirname "$0")" -name '_w-pkg-update-*') -- bash



# ---------------------------------------------------
# BREW START

echo -e '\n--------\nbrew\n'  >&2
# shellcheck disable=SC2154
echo -e "${PURPLE}[>] ...$NC pulling updates"  >&2
brew update


echo -e "${PURPLE}[>] ...$NC starting upgrades"  >&2
brew upgrade || true


if [ -n "$GREEDY" ]; then
  echo -e "${PURPLE}[>] ...$NC starting greedy cask upgrades"  >&2
  brew upgrade --cask --greedy
fi

git break-osx-credential-helper

# BREW END
# ---------------------------------------------------


if [ -z "$NO_MACOS_UPDATES" ]; then
  mac-os-updates
fi


if [ -z "$DISABLE_GIT_REPO_UPDATES" ]; then
  echo -e '\n--------\nw-git-cleanup\n'  >&2

  set +e
  filename=/tmp/_w-git-cleanup.log
  echo "[.] follow along via \`tail -F $filename\`."  >&2
  # TODO color output -> `less -R "$filename"`
  { echo -n "start: "; date; } > "$filename"
  echo "Log file: $filename"
  w-git-cleanup >> "$filename" 2>&1
  { echo; echo -n "end: "; date; } >> "$filename"
  set -e
fi


echo  >&2
echo  >&2
echo -n 'Uptime: '
uptime
echo
sudo systemsetup -getremotelogin  | grep --color=always -E 'On|Off'
echo "End: $(date)"  >&2
echo =====================  >&2

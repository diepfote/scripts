#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


_help() {
cat <<EOF
USAGE: w-pkg-update [-g] [-r]

FLAGS:
-g    greedy option for brew
-r    re-install xcode commandline tools
EOF
}

# Parse arguments
positional_args=()
GREEDY=''
REINSTALL_XCODE=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    -g|--greedy)
    GREEDY=true
    shift
    ;;

    -r|--reinstall-xcode)
    REINSTALL_XCODE=true
    shift
    ;;

    -h|--help)
    _help >&2
    exit 0
    ;;

    *) # unknown option
    echo -e "${RED}Invalid parameter:$NC '$1'!"
    _help >&2
    exit 1
    ;;
  esac
done
set -- "${positional_args[@]}"


# shellcheck source=/dev/null
source ~/Documents/scripts/source-me/spinner.sh
# shellcheck source=/dev/null
source ~/Documents/scripts/source-me/common-functions.sh
# shellcheck source=/dev/null
source ~/Documents/scripts/kubernetes/source-me/common-functions.sh

set +u
spinner
spinner_pid="$!"
set -u

cleanup () {
  set +x

  local spinner_pid="$1"
  kill "$spinner_pid"
}

# shellcheck disable=SC2064
trap 'cleanup "$spinner_pid"' EXIT  # stop spinner


echo -e '\n--------\npip\n'
#
# bypass virtualenv with `-E`
#
# $ python -E ...
#
for pkg in $(python3 -E -m pip list --user --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1); do
  python3 -E -m pip install --upgrade --user "$pkg"  | grep -v 'already satisfied' || true
done

echo -e '\n--------\nruby\n'
gem update --user  # requires gem install rubygems-update


echo -e '\n--------\nnpm\n'
for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2); do
  # safe upgrade all https://gist.github.com/othiym23/4ac31155da23962afd0e
  set -x
  npm -g install "$package"
  set +x
done

echo -e '\n--------\nkrew\n'
oc krew update
oc krew upgrade  2>&1 |  grep -vE 'already on the newest version|Upgrading plugin' || true

echo -e '\n--------\napm\n'
apm upgrade -c false

echo -e '\n--------\nbrew\n'
echo -en "  $PURPLE"; echo -e "[>] pulling updates$NC"
brew update

kill "$spinner_pid"

echo -en "  $PURPLE"; echo -e "[>] starting upgrades$NC"
brew upgrade || true

# ---------------------------------------------------

if [ -n "$GREEDY" ]; then
  echo -en "  $PURPLE"; echo -e "[>] starting greedy cask upgrades$NC"
  brew upgrade --cask --greedy
fi

set +u
spinner
spinner_pid="$!"
set -u

echo -e '\n\n--------\n\nListing Darwin updates'
pkg_info=()

while IFS='' read -r line; do
  pkg_info+=( "$line" )
done < <( softwareupdate --all -l --force )

for line in "${pkg_info[@]}"; do
  echo "$line"
done

if [ "${#pkg_info[@]}" -gt 3 ]; then  # 3 lines are returned always

  echo -e '\n\n--------\n\nInstalling Darwin updates that do not require a restart.'

  set -x
  softwareupdate -i --no-scan -a
  set +x

  echo 'Do you want to update & restart?'
  set +u
  if yesno; then
    echo -e '\n\n--------\n\nInstalling Darwin updates that require a restart.'
    set -x
    sudo softwareupdate -i --no-scan -a -R
    set +x
  fi
  set -u
fi


if [ -n "$REINSTALL_XCODE" ]; then
  echo -en "  $PURPLE"; echo -e "[>] reinstallig xcode commandline tools$NC"

  set -x
  sudo rm -rf /Library/Developer/CommandLineTools
  sudo xcode-select --install
  sudo -k
  set +x
fi


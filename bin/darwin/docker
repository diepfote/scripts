#!/usr/bin/env bash

# all of these stem from https://www.shellcheck.net/wiki/
set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs
shopt -s inherit_errexit  # Bash disables set -e in command substitution by default; reverse this behavior

cleanup () { set +x; }
trap cleanup EXIT

: "${DOCKER_BACKING_INSTANCE:=colima}"

set_docker_stop_args () {
  local FORCE=''
  while [ $# -gt 0 ]; do
  # check if forced `rm`
  key="$1"
    case "$key" in
      -f)
      shift
      FORCE=true
      ;;

      --)
      shift
      break
      ;;

      *)
      # keep
      save_args+=("$1")
      shift
      ;;
    esac
  done

  if [ -n "$FORCE" ]; then
    set -- "${save_args[@]}"
    save_args=()

    # check if user provided `-t n` option for forceful `rm`
    TIMEOUT_SET_BY_USER=''
    while [ $# -gt 0 ]; do
      key="$1"
        case "$key" in
          --)
          shift
          break
          ;;

          -t)
          TIMEOUT_SET_BY_USER=true
          save_args+=("$1")
          save_args+=("$2")
          shift 2
          # keep
          ;;

          *)
          # keep
          save_args+=("$1")
          shift
          ;;
      esac
    done

    if [ -z "$TIMEOUT_SET_BY_USER" ]; then
      # set timeout to 0 if the user did not provide a custom timeout (overrides default of `-t 10`)
      save_args+=(-t 0)
    fi
  fi
}

set_docker_rm_args () {
  local FORCE=''
  while [ $# -gt 0 ]; do
  # check if forced `rm`
  key="$1"
    case "$key" in
      -f)
      shift
      FORCE=true
      ;;

      --)
      shift
      break
      ;;

      *)
      # keep
      save_args+=("$1")
      shift
      ;;
    esac
  done

  if [ -n "$FORCE" ]; then
    set -- "${save_args[@]}"
    save_args=()

    # check if user provided `-t n` option for forceful `rm`
    TIMEOUT_SET_BY_USER=''
    while [ $# -gt 0 ]; do
      key="$1"
        case "$key" in
          --)
          shift
          break
          ;;

          -t)
          TIMEOUT_SET_BY_USER=true
          save_args+=("$1")
          save_args+=("$2")
          shift 2
          # keep
          ;;

          *)
          # keep
          save_args+=("$1")
          shift
          ;;
      esac
    done

    if [ -z "$TIMEOUT_SET_BY_USER" ]; then
      # set timeout to 0 if the user did not provide a custom timeout (overrides default of `-t 10`)
      save_args+=(-f -t 0)
    fi
  fi
}

COMPOSE=''
while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    compose)
      COMPOSE=-compose
      shift
      break
      ;;

    rm)
    if [ "$DOCKER_BACKING_INSTANCE" = default ]; then
    # if [[ "$command" =~ podman.* ]]; then
      :
    else
      break
    fi
    shift
    save_args+=(rm)
    set_docker_rm_args "$@"
    set -- "${save_args[@]}"
    break
    ;;

    stop)
    shift
    save_args+=(stop)
    set_docker_stop_args "$@"
    set -- "${save_args[@]}"
    break
    ;;

    -h|--help)
    break
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;

  esac
done

# shellcheck disable=2154
if [ "$DOCKER_BACKING_INSTANCE" = default ]; then
  command=(podman"${COMPOSE-:''}")
  limactl shell "$DOCKER_BACKING_INSTANCE" -- "${command[@]}" "$@"
elif [ "$DOCKER_BACKING_INSTANCE" = colima ]; then
  (
    # TODO dirty hack for ansible playbook phase `Gathering facts`
    : "${HOME:=/Users/florian.sorko}"

    DOCKER_HOST="unix://$HOME/.${DOCKER_BACKING_INSTANCE}/docker.sock"
    export DOCKER_HOST

    if [ -n "$COMPOSE" ]; then
      command=(/opt/homebrew/opt/docker-compose/bin/docker-compose)
    else
      command=(/opt/homebrew/bin/docker)
    fi

    set -x
    is_build_command=''
    if [[ "$1" =~ build* ]]; then
      is_build_command=true
    fi
    temp_args=() inserted_progress_args=''
    # insert progress arguments right after build commands (`build` or `buildx build`)
    for item in "$@"; do
      if [[ "$item" =~ build* ]]; then
        # save `build` or `buildx build` command
        temp_args+=("$item")
      else
        if [ -n "$is_build_command" ]; then
          if [ -z "$inserted_progress_args" ]; then
            # in case this is a build command add progress args once, after the build command(s)
            temp_args+=(--progress plain)
            inserted_progress_args=true
          fi
        fi

        # always save previous args
        temp_args+=("$item")
      fi

    done
    set -- "${temp_args[@]}"
    unset is_build_command inserted_progress_args temp_args

    set -x
    "${command[@]}" "$@"
    set +x
  )
else
  echo "${RED}invalid$NC $DOCKER_BACKING_INSTANCE" >&2
  exit
fi


if [ $? -ne 0 ]; then
  echo "[.] ${YELLOW}Manually provision via:$NC" >&2
  echo "    ${GREEN}\$${NC} colima exec -- sudo apk update && colima exec -- sudo apk add docker docker-compose && colima exec -- sudo rc-update add docker && colima ssh -- sed -i -r 's#(.*buildkit.*: )true#\1false#' /etc/docker/daemon.json && colima exec -- sudo service docker start" >&2
fi

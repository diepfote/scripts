#!/usr/bin/env bash

# all of these stem from https://www.shellcheck.net/wiki/
set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs
shopt -s inherit_errexit  # Bash disables set -e in command substitution by default; reverse this behavior

set_docker_rm_args () {
  local FORCE=''
  while [ $# -gt 0 ]; do
  # check if forced `rm`
  key="$1"
    case "$key" in
      -f)
      shift
      FORCE=true
      ;;

      --)
      shift
      break
      ;;

      *)
      # keep
      save_args+=("$1")
      shift
      ;;
    esac
  done

  if [ -n "$FORCE" ]; then
    set -- "${save_args[@]}"
    save_args=()

    # check if user provided `-t n` option for forceful `rm`
    TIMEOUT_SET_BY_USER=''
    while [ $# -gt 0 ]; do
      key="$1"
        case "$key" in
          --)
          shift
          break
          ;;

          -t)
          TIMEOUT_SET_BY_USER=true
          save_args+=("$1")
          save_args+=("$2")
          shift 2
          # keep
          ;;

          *)
          # keep
          save_args+=("$1")
          shift
          ;;
      esac
    done

    if [ -z "$TIMEOUT_SET_BY_USER" ]; then
      # set timeout to 0 if the user did not provide a custom timeout (overrides default of `-t 10`)
      save_args+=(-f -t 0)
    fi
  fi
}

: "${DOCKER_BACKING_INSTANCE:=colima}"
# shellcheck disable=2154
if [ "$DOCKER_BACKING_INSTANCE" = default ]; then
  command=(podman)
  compose_command=podman-compose
elif [ "$DOCKER_BACKING_INSTANCE" = colima ]; then
  command=(sudo docker)
  compose_command=(sudo docker-compose)
else
  command=("echo 'invalid $DOCKER_BACKING_INSTANCE'")
fi

while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    compose)
      shift
      command=("${compose_command[@]}")
      break
      ;;

    rm)
    shift
    save_args+=(rm)
    set_docker_rm_args "$@"
    set -- "${save_args[@]}"
    break
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;

  esac
done

if ! limactl shell "$DOCKER_BACKING_INSTANCE" -- "${command[@]}" "$@"; then

  if [ "$DOCKER_BACKING_INSTANCE" = colima ]; then
    # if docker was manually provisioned it is set up per user
    unset "command[0]"
    if ! limactl shell "$DOCKER_BACKING_INSTANCE" -- "${command[@]}" "$@"; then
      echo "[.] ${YELLOW}Manually provision via:$NC" >&2
      echo "    ${GREEN}\$${NC} colima exec -- sudo apk update && colima exec -- sudo apk add docker docker-compose && colima exec -- sudo rc-update add docker && colima ssh -- sed -i -r 's#(.*buildkit.*: )true#\1false#' /etc/docker/daemon.json && colima exec -- sudo service docker start" >&2
    fi
  fi
fi


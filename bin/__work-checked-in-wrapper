#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


temp="$(mktemp -d)"

_cleanup () {
  git config --global color.ui auto
  rm -rf "$temp"

  _post-pass-private
}

_pre-pass-private () {
  find "$1" -type l -delete
}

_post-pass-private () {
  # shellcheck disable=SC1090 
  (source ~/.sh_functions; _link-shared-password-store &)
}


trap _cleanup EXIT

file="$temp"/work-checked-in

conf_file="$1"
command=('git' 'status' '-sb')

git config --global color.ui always  # like grep --color=always

while read -r repo_dir; do
  if [ "$repo_dir" = ~/.password-store-private ] || \
     [ "$repo_dir" = ~/.password-store-work ]; then
    _pre-pass-private "$repo_dir"
  fi

  if [ "$repo_dir" = "$HOME" ]; then
    # prevent line 9 from showing up
    work_repo_template -d "$repo_dir" "${command[@]}" | grep -v .gitconfig >> "$file"

# TODO: improve flag handling to allow for --root flag --> use sudo
# if given
#
#   elif [ "$repo_dir" = /root ]; then
#     set -x
#     sudo chown "$USER" /root
#     set +x

#     work_repo_template -d "$repo_dir" "${command[@]}" >> "$file"

#     set -x
#     sudo chown root /root
#     sudo -k
#     set +x
  else
    work_repo_template -d "$repo_dir" "${command[@]}" >> "$file"
  fi

done <"$conf_file"

# TODO invalidate sudo rights
# sudo -k


less -R "$file"


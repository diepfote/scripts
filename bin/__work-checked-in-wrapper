#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


temp="$(mktemp -d)"

_cleanup () {
  git config --global color.ui auto
  rm -rf "$temp"

  _post-pass-private
}

_pre-pass-private () {
  find "$1" -type l -delete
}

_post-pass-private () {
  # shellcheck disable=SC1090
  (bash -i -c '_link-shared-password-store' 2>/dev/null &)
}


trap _cleanup EXIT

file="$temp"/work-checked-in

conf_file="$1"
shift
command=('git' 'status' '-sb')

git config --global color.ui always  # like grep --color=always

while read -r repo_dir; do
  # leave at the top
  #
  if [ "$(expr substr "$repo_dir" 1 1)" = '#' ] || [ -z "$repo_dir" ]; then
    # skip comment line & empty lines
    continue
  fi

  # leave at the top
  #
  # replace $HOME with $HOME value
  repo_dir="$(echo "$repo_dir" | sed "s#\$HOME#$HOME#")"

  # leave at the top
  #
  if [ "$repo_dir" = ~/.password-store-private ] || \
     [ "$repo_dir" = ~/.password-store-work ]; then
    _pre-pass-private "$repo_dir"
  fi

  # -----------------

  if [ "$repo_dir" = "$HOME" ]; then
    # prevent line 9 from showing up
    git_execute_on_repo -d "$repo_dir" -- "${command[@]}" | grep -v .gitconfig >> "$file"

    continue
  fi

  # if there is a glob
  if echo "$repo_dir" | grep -E '\*$' >/dev/null; then

    # allow variable re-evaluation -> globbing
    for _repo_dir in $repo_dir; do
      git_execute_on_repo "$@" -d "$_repo_dir" -- "${command[@]}" >> "$file"
    done

    # do not execute on the glob
    continue

  else
    git_execute_on_repo "$@" -d "$repo_dir" -- "${command[@]}" >> "$file"
  fi


done <"$conf_file"

# TODO invalidate sudo rights
# sudo -k


less -R "$file"


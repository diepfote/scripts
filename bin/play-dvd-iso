#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs

source ~/Repos/scripts/source-me/common-functions.sh


_help () {
cat <<EOF
USAGE: play-dvd-iso (-vlc) ISO_FILE

OPTIONS:
  -vlc    [boolean] use vlc instead of mpv
EOF
}

if [ $# -eq 0 ]; then
  _help
  exit
fi

# Parse arguments
positional_args=()
USE_VLC=''
LOOPBACK_DEV=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    --loopback)
    LOOPBACK_DEV=true
    shift 1
    ;;

    -vlc)
    USE_VLC=true
    shift 1
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    *) # unknown option
    positional_args+=("$1") # save in an array for later
    shift
    ;;
  esac
done
set -- "${positional_args[@]}"

file="$1"
# check is in default movie directory
if [ ! -f "$file" ]; then
  dir="$(read_toml_setting ~/.config/personal/sync.conf movies)"
  file="$dir/$1"
fi

vlc=/usr/bin/vlc
mpv=/usr/bin/mpv
if [ "$(uname)" = Darwin ]; then
  vlc=/Applications/VLC.app/Contents/MacOS/VLC
  mpv=/opt/homebrew/bin/mpv
fi


if [ -z "$USE_VLC" ]; then
  set -x
  "$mpv" dvd://  --dvd-device="$file"
else

what="$file"

if [ -n "$LOOPBACK_DEV" ]; then

  mount_dir="$(mktemp -d)"
  mkdir -p "$mount_dir"  # p flag to avoid errors if exists

  cleanup () {
    fusermount -u "$mount_dir"
    rm -r "$mount_dir"
    set +x
  }
  trap "cleanup" EXIT

  fuseiso "$file" "$mount_dir"

  what="$mount_dir"
fi

  set -x
  "$vlc" "$what"

fi




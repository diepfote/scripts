#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs

trap 'set +x' EXIT


[ -z "$*" ] && command=(bash) || command=("$@")

set -x

docker run \
  -u build-user \
  --network=host \
  -v /var/cache/pkgfile:/var/cache/pkgfile \
  -v ~/.cache/yay:/build/.cache/yay \
  -v ~/.gnupg:/build/.gnupg \
  -v ~/.container:/build/.container \
  -v ~/Documents/config:/build/Documents/config:ro \
  -v ~/.vim:/build/.vim \
  -v ~/.config/coc:/build/.config/coc \
  -v ~/.config/nvim:/build/.config/nvim \
  -v ~/.config/fish:/build/.config/fish \
  -v ~/.local/share/nvim:/build/.local/share/nvim \
  -v ~/.local/share/fish:/build/.local/share/fish \
  -v ~/Documents/scripts:/build/Documents/scripts \
  -v ~/Documents/python:/build/Documents/python \
  -v ~/Documents/golang:/build/Documents/golang \
  -v ~/Documents/asm:/build/Documents/asm \
  -v "$PWD":/pwd:ro \
  -e IN_CONTAINER=true \
  --rm \
 --cap-add SYS_ADMIN \
 --device /dev/fuse \
  -it \
  --name arch-all \
  arch-all \
  "${command[@]}" || docker exec -it arch-all bash  # try exec on failure


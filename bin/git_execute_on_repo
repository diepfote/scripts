#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs

source ~/Documents/scripts/source-me/posix-compliant-shells.sh

# Parse arguments
USE_SUDO=''
while [ $# -gt 0 ]; do
  key="$1"
  case "$key" in
    -r|--root)
    USE_SUDO=true
    shift
    ;;

    -d|--dir)
    DIR="$2"
    # replace $HOME with $HOME value
    DIR="$(echo "$DIR" | sed "s#\$HOME#$HOME#")"
    shift 2
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;
  esac
done


if echo "$DIR" | grep -E '^\s*#|^\s*$' 1>/dev/null 2>&1; then
  # ignore commented lines
  exit
fi

NC="$(echo "$NC" | tr -d "$(echo -ne '\x0f')")" # fix ^0 in output on Mac OS
export NC
if [ -t 1 ]; then  # if terminal
  echo -en "$PURPLE"
fi
echo -e "$DIR"
if [ -t 1 ]; then  # if terminal
  echo -en "$NC"
fi


_run_command_in_dir () {
  if [ -z "$TRY_SUDO" ]; then
    (cd "$DIR" && "$@")
    return 0
  elif [ -n "$USE_SUDO" ] && [ -n "$TRY_SUDO" ]; then
    set -x
    sudo chown "$USER" "$DIR"
    set +x

    unset_chown () {
      set -x
      sudo chown root "$DIR"
      sudo -k
      set +x
    }
    trap unset_chown EXIT

    if [ -d "$DIR/.git" ]; then
      (cd "$DIR" && "$@")
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}



if [ -d "$DIR/.git" ]; then
  TRY_SUDO=''
else
  TRY_SUDO=true
fi

if ! _run_command_in_dir "$@"; then
  echo -en "$YELLOW"; echo -e "No .git/ in $DIR$NC"
fi
echo


#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


_help() {
cat <<EOF
USAGE: git_execute_on_all_repos -c <CONFIG_FILE> <COMMAND_TO_RUN> [OPTIONS_FOR_COMMAND]

Runs an arbitrary command on all git repos in <CONFIG_FILE>.

OPTIONS:
  -c|--config-file CONFIG_FILE  File containing repo directories one per line
EOF
}

if [ $# -eq 0 ]; then
  _help
  exit
fi


# Parse arguments
CONFIG_FILE=''
while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    -c|--config-file)
    CONFIG_FILE="$2"
    shift 2
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;
  esac
done


while IFS='' read -r repo_dir; do
  # leave at the top
  #
  if [ "$(expr substr "$repo_dir" 1 1)" = '#' ] || [ -z "$repo_dir" ]; then
    # skip comment line & empty lines
    continue
  fi

  # leave at the top
  #
  # replace $HOME with $HOME value
  repo_dir="$(echo "$repo_dir" | sed "s#\$HOME#$HOME#")"

  # if there is a glob
  if echo "$repo_dir" | grep -E '\*$' >/dev/null; then

    # allow variable re-evaluation -> globbing
    for _repo_dir in $repo_dir; do
      git_execute_on_repo -d "$_repo_dir" -- "$@"
    done

    # do not execute on the glob
    continue

  else
    git_execute_on_repo -d "$repo_dir" -- "$@"
  fi

done <"$CONFIG_FILE"


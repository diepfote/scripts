#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs
shopt -s inherit_errexit  # Bash disables set -e in command substitution by default; reverse this behavior


source ~/Documents/scripts/source-me/spinner.sh
source ~/Documents/scripts/source-me/posix-compliant-shells.sh
source ~/Documents/scripts/source-me/linux/posix-compliant-shells.sh


# TODO add items if you want to use this functionality!
# I set this elsewhere
#
pkgs_with_saved_checksums=()
source ~/Documents/scripts/private/source-me/linux/posix-compliant-shells.sh


cleanup() {
  set +x

  if [ -n "$SPINNER_PID" ]; then
    kill "$SPINNER_PID" >/dev/null 2>&1
  fi
}
trap cleanup EXIT


_yay-update-pkgbuild () {
  pkg_name="$1"

  (set -x; cd "$yay_cache" && yay -G "$pkg_name")
  echo "  [.] PKGBUILD for \`$pkg_name\` updated."
}

_yay-update-based-on-checksum () {
  pkg_name="$1"

  if ~/Documents/python/tools/archlinux-yay-remove-package-info.py "$yay_cache"/"$pkg_name"/PKGBUILD | sha256sum | grep -f "$yay_cache"/"$pkg_name"-PKGBUILD.sha256sum; then
    echo
    set -x
    yay --noconfirm -Sa "$pkg_name"
    set +x
  else
    set +x
    # shellcheck disable=SC1090
    source ~/Documents/scripts/source-me/colors.sh
    # shellcheck disable=SC2154
    echo -en "$RED"
    echo     "[!] checksums do not match for \`$pkg_name\`."
    # shellcheck disable=SC2154
    echo -e "     Not updating automatically!$NC"
    exit 1
  fi
}

_yay-update-anything-else () {
  # e.g. ^$|pkg1|pkg2
  grep_pattern="$(for elem in "${pkgs_with_saved_checksums[@]}"; do echo -n "$elem|"; done | sed 's#|$## ; s#^#\^\$|#')"
  if echo "${upgradeable_AURs[*]}" | grep -vE "$grep_pattern"; then
    # TODO list packages first
    local command
    command=(yay -Syua)
    set -x
    while ! "${command[@]}"; do
      :
    done
    set +x
  fi
}

_yay_set_upgradeable_AURs () {
  upgradeable_AURs=()

  while read -r line; do
    upgradeable_AURs+=("$line")
  done < <(yay -Qua)

}

# default
pacman_cmd=('sudo' 'pacman' '-Syu')
if [ "$1" = --dry-run ]; then
  # used to check if pacman arguments are valid
  shift
  pacman_cmd=('pacman' '-Syu')
  "${pacman_cmd[@]}" "$@" || true
  exit
elif [ "$1" = --repeat ]; then
  shift
  # do not update database -> just did that presumably
  pacman_cmd=('sudo' 'pacman' '-Su')
fi


# update package info for listing
echo n | "${pacman_cmd[@]}" || :
pacman-get-required-by-for-upgradeable

set -x
while ! "${pacman_cmd[@]}" "$@"; do
  sleep 1

  # do not fetch updates -> we do not review them in vim in this loop
  pacman_cmd=('sudo' 'pacman' '-Su')
done
set +x


set +u
spinner
SPINNER_PID="$!"
set -u

_yay_set_upgradeable_AURs
echo '[.] updating pkgbuilds for AUR packages.'
for pkg_name in "${pkgs_with_saved_checksums[@]}"; do
  if ! echo "${upgradeable_AURs[*]}" | grep "$pkg_name"; then
    # not upgradable. skipping
    continue
  fi
  _yay-update-pkgbuild "$pkg_name"
done
echo '[.] attempting to upgrade AUR packages.'
for pkg_name in "${pkgs_with_saved_checksums[@]}"; do
  if ! echo "${upgradeable_AURs[*]}" | grep "$pkg_name"; then
    # not upgradable. skipping
    continue
  fi
  _yay-update-based-on-checksum "$pkg_name"  || true
done
_yay-update-anything-else
set +x


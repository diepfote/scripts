#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs
shopt -s inherit_errexit  # Bash disables set -e in command substitution by default; reverse this behavior


pacman-get-required-by-for-upgradeable () {
  _pacman-get-required-by-for-upgradeable () {
    pkgs=()

    while IFS='' read -r line; do
      pkgs+=( "$line" )
    done < <(pacman -Sup --print-format '%n')

    # no upgradable packages?
    if [ ${#pkgs[@]} -gt 0 ]; then
      echo "${pkgs[@]}" | xargs pacman -Qii 2>&1 | \
        grep -E '^\s*$|^Description|^Name|^Required By|^Optional For'
    fi
  }

  pkg_info=()

  while IFS='' read -r line; do
    pkg_info+=( "$line" )
  done < <(_pacman-get-required-by-for-upgradeable)

  if [ "${#pkg_info[@]}" -gt 1 ]; then
    # snatched from https://stackoverflow.com/a/15692004
    printf '%s\n' "${pkg_info[@]}" | vim -c 'set buftype=nofile' -
  fi
}


_help() {
cat <<EOF
USAGE: yay-all [FLAGS] [--] [ARGS/FLAGS/OPTS for pacman]

FLAGS:
  --dry-run              used in \`pkg-update\`
  --no-fetch             run \`pacman -Su\` instead of \`pacman -Syu\`
  --repeat               same as \`--no-fetch\` + do not open dialog
  --list-only            list upgradable packages, then quit

FLAGS for pacman e.g.:
  --noconfirm            passed to pacman as is
EOF
}


# Parse arguments
PACMAN_DOWNLOAD_PACKAGES_ONLY=''
DRY_RUN=''
NO_FETCH=''
REPEAT=''
LIST_ONLY=''
while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    -h|--help)
    _help
    exit 0

    ;;
    --dry-run)
    DRY_RUN=true
    shift
    ;;


    --no-fetch)
    NO_FETCH=true
    shift
    ;;

    --repeat)
    NO_FETCH=true
    REPEAT=true
    shift
    ;;

    --list-only)
    LIST_ONLY=true
    shift
    ;;

    --)
    shift
    break
    ;;

    *)
    break
    ;;

  esac
done



source ~/Documents/scripts/source-me/spinner.sh
source ~/Documents/scripts/source-me/posix-compliant-shells.sh
source ~/Documents/scripts/source-me/linux/posix-compliant-shells.sh


# TODO add items if you want to use this functionality!
# I set this elsewhere
#
pkgs_with_saved_checksums=()
source ~/Documents/scripts/private/source-me/linux/posix-compliant-shells.sh


cleanup() {
  set +x

  if [ -n "$SPINNER_PID" ]; then
    kill "$SPINNER_PID" >/dev/null 2>&1
  fi
}
trap cleanup EXIT


_yay-update-pkgbuild () {
  pkg_name="$1"

  (set -x; cd "$yay_cache" && yay -G "$pkg_name")
  echo "  [.] PKGBUILD for \`$pkg_name\` updated." >&2
}

_yay-update-anything-else () {
  # e.g. ^$|pkg1|pkg2
  grep_pattern="$(for elem in "${pkgs_with_saved_checksums[@]}"; do echo -n "$elem|"; done | sed 's#|$## ; s#^#\^\$|#')"
  if echo "${upgradeable_AURs[*]}" | grep -vE "$grep_pattern" >&2; then
    # TODO list packages first
    local command
    command=(yay -Syua)
    set -x
    while ! "${command[@]}"; do
      :
    done
    set +x
  fi
}

_yay_set_upgradeable_AURs () {
  upgradeable_AURs=()

  echo '[.] updating pkgbuilds for AUR packages.' >&2
  set -x
  while read -r line; do
    upgradeable_AURs+=("$line")
  done < <(yay -Qua)
  set +x
}

# default
pacman_cmd=('pacman' --sudo '-Syu')
if [ -n "$DRY_RUN" ]; then
  # used to check if pacman arguments are valid
  pacman_cmd=('pacman' '-Syu')
  "${pacman_cmd[@]}" "$@" || true
  exit
elif [ -n "$NO_FETCH" ]; then
  # do not update database -> just did that presumably
  pacman_cmd=('pacman' --sudo '-Su')
fi

# update package info for listing
echo n | pacman --sudo -Sy || true

if [ $# -gt 0 ]; then
  if [ "$1" = -w ]; then
    PACMAN_DOWNLOAD_PACKAGES_ONLY=true
  fi
fi

if [ -n "$REPEAT" ] || [ -n "$PACMAN_DOWNLOAD_PACKAGES_ONLY" ]; then
  :
elif [ -n "$LIST_ONLY" ]; then
  pacman-get-required-by-for-upgradeable
  exit
else
  pacman-get-required-by-for-upgradeable
fi

set -x
while ! "${pacman_cmd[@]}" "$@"; do
  sleep 1

  # do not fetch updates -> we do not review them in vim in this loop
  pacman_cmd=('pacman' --sudo '-Su')
done
set +x


set +u
spinner
SPINNER_PID="$!"
set -u

_yay_set_upgradeable_AURs

for pkg_name in "${pkgs_with_saved_checksums[@]}"; do
  if ! echo "${upgradeable_AURs[*]}" | grep "$pkg_name" >&2; then
    # not upgradable. skipping
    continue
  fi
  _yay-update-pkgbuild "$pkg_name"
done
echo '[.] attempting to upgrade AUR packages.' >&2
for pkg_name in "${pkgs_with_saved_checksums[@]}"; do
  if ! echo "${upgradeable_AURs[*]}" | grep "$pkg_name" >&2; then
    # not upgradable. skipping
    continue
  fi
  _yay-update-based-on-checksum "$pkg_name"  || true
done
_yay-update-anything-else
set +x

sudo -k

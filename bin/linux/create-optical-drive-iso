#!/usr/bin/env bash

set -o pipefail  # propagate errors
set -u  # exit on undefined
set -e  # exit on non-zero return value
#set -f  # disable globbing/filename expansion
shopt -s failglob  # error on unexpaned globs


source ~/Documents/scripts/source-me/{common-functions,posix-compliant-shells}.sh


_help() {
cat <<EOF
USAGE: create-optical-drive-iso [-r|--use-ddrescue]  <iso-filename>

OPTIONS:
  -r|--use-ddrescue    use ddrescue (3 passes) instead of dd
EOF
}

# Parse arguments
positional_args=()
USE_DDRESCUE=''
while [ $# -gt 0 ]; do
key="$1"
  case "$key" in
    -r|--use-ddrescue)
    USE_DDRESCUE=true
    shift
    ;;

    -h|--help)
    _help
    exit 0
    ;;

    *) # unknown option
    positional_args+=("$1") # save in an array for later
    shift
    ;;
  esac
done

set -- "${positional_args[@]}"

# this indicates no name --> anything else was a flag or option
if [ $# -eq 0 ]; then
  _help
  exit
fi


size="$(isosize -x /dev/sr0 | cut -d ' ' -f6)"
sector_count="$(isosize -x /dev/sr0 | cut -d ' ' -f3 | cut -d ',' -f1)"

location_to_write_to="$(read_toml_setting ~/Documents/config/sync.conf movies)"
# if [ ! -d "$location_to_write_to" ]; then
  location_to_write_to=~/Desktop
# fi
output_path="$location_to_write_to/$1.iso"

echo "Writing iso to $output_path"


if [ -z "$USE_DDRESCUE" ]; then
  set -x
  if ! dd if=/dev/sr0  of="$output_path"  bs="$size" count="$sector_count" conv=noerror,sync  status=progress; then
    echo "${RED}[!] dd failed for $output_path!$NC"
    exit 1
  fi
else
  log_file=~/Desktop/ddrescue_log.txt

  set -x

  # First round -> copy every block without read errors and log the errors to a log file.
  #
  ddrescue -b "$sector_count" -n /dev/sr0 "$output_path" "$log_file"
  # Second run -> very similar to the first, except that instead of using the "-n"
  # flag we will use the "-d" flag to tell ddrescue to go into direct mode
  # and read as much data from the CD as possible (retrying a maximum of 3 times).
  #
  ddrescue -b "$sector_count" -d -f -r 3 /dev/sr0 "$output_path" "$log_file"
fi

sync

